{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Text = exports.stringToArray = void 0;\nconst Util_1 = require(\"../Util\");\nconst Factory_1 = require(\"../Factory\");\nconst Shape_1 = require(\"../Shape\");\nconst Global_1 = require(\"../Global\");\nconst Validators_1 = require(\"../Validators\");\nconst Global_2 = require(\"../Global\");\nfunction stringToArray(string) {\n  return Array.from(string);\n}\nexports.stringToArray = stringToArray;\nvar AUTO = 'auto',\n  CENTER = 'center',\n  INHERIT = 'inherit',\n  JUSTIFY = 'justify',\n  CHANGE_KONVA = 'Change.konva',\n  CONTEXT_2D = '2d',\n  DASH = '-',\n  LEFT = 'left',\n  LTR = 'ltr',\n  TEXT = 'text',\n  TEXT_UPPER = 'Text',\n  TOP = 'top',\n  BOTTOM = 'bottom',\n  MIDDLE = 'middle',\n  NORMAL = 'normal',\n  PX_SPACE = 'px ',\n  SPACE = ' ',\n  RIGHT = 'right',\n  RTL = 'rtl',\n  WORD = 'word',\n  CHAR = 'char',\n  NONE = 'none',\n  ELLIPSIS = 'â€¦',\n  ATTR_CHANGE_LIST = ['direction', 'fontFamily', 'fontSize', 'fontStyle', 'fontVariant', 'padding', 'align', 'verticalAlign', 'lineHeight', 'text', 'width', 'height', 'wrap', 'ellipsis', 'letterSpacing'],\n  attrChangeListLen = ATTR_CHANGE_LIST.length;\nfunction normalizeFontFamily(fontFamily) {\n  return fontFamily.split(',').map(family => {\n    family = family.trim();\n    const hasSpace = family.indexOf(' ') >= 0;\n    const hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n    if (hasSpace && !hasQuotes) {\n      family = `\"${family}\"`;\n    }\n    return family;\n  }).join(', ');\n}\nvar dummyContext;\nfunction getDummyContext() {\n  if (dummyContext) {\n    return dummyContext;\n  }\n  dummyContext = Util_1.Util.createCanvasElement().getContext(CONTEXT_2D);\n  return dummyContext;\n}\nfunction _fillFunc(context) {\n  context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction _strokeFunc(context) {\n  context.setAttr('miterLimit', 2);\n  context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction checkDefaultFill(config) {\n  config = config || {};\n  if (!config.fillLinearGradientColorStops && !config.fillRadialGradientColorStops && !config.fillPatternImage) {\n    config.fill = config.fill || 'black';\n  }\n  return config;\n}\nclass Text extends Shape_1.Shape {\n  constructor(config) {\n    super(checkDefaultFill(config));\n    this._partialTextX = 0;\n    this._partialTextY = 0;\n    for (var n = 0; n < attrChangeListLen; n++) {\n      this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);\n    }\n    this._setTextData();\n  }\n  _sceneFunc(context) {\n    var textArr = this.textArr,\n      textArrLen = textArr.length;\n    if (!this.text()) {\n      return;\n    }\n    var padding = this.padding(),\n      fontSize = this.fontSize(),\n      lineHeightPx = this.lineHeight() * fontSize,\n      verticalAlign = this.verticalAlign(),\n      direction = this.direction(),\n      alignY = 0,\n      align = this.align(),\n      totalWidth = this.getWidth(),\n      letterSpacing = this.letterSpacing(),\n      fill = this.fill(),\n      textDecoration = this.textDecoration(),\n      shouldUnderline = textDecoration.indexOf('underline') !== -1,\n      shouldLineThrough = textDecoration.indexOf('line-through') !== -1,\n      n;\n    direction = direction === INHERIT ? context.direction : direction;\n    var translateY = lineHeightPx / 2;\n    var baseline = MIDDLE;\n    if (Global_1.Konva._fixTextRendering) {\n      var metrics = this.measureSize('M');\n      baseline = 'alphabetic';\n      translateY = (metrics.fontBoundingBoxAscent - metrics.fontBoundingBoxDescent) / 2 + lineHeightPx / 2;\n    }\n    var lineTranslateX = 0;\n    var lineTranslateY = 0;\n    if (direction === RTL) {\n      context.setAttr('direction', direction);\n    }\n    context.setAttr('font', this._getContextFont());\n    context.setAttr('textBaseline', baseline);\n    context.setAttr('textAlign', LEFT);\n    if (verticalAlign === MIDDLE) {\n      alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n    } else if (verticalAlign === BOTTOM) {\n      alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n    }\n    context.translate(padding, alignY + padding);\n    for (n = 0; n < textArrLen; n++) {\n      var lineTranslateX = 0;\n      var lineTranslateY = 0;\n      var obj = textArr[n],\n        text = obj.text,\n        width = obj.width,\n        lastLine = obj.lastInParagraph,\n        spacesNumber,\n        oneWord,\n        lineWidth;\n      context.save();\n      if (align === RIGHT) {\n        lineTranslateX += totalWidth - width - padding * 2;\n      } else if (align === CENTER) {\n        lineTranslateX += (totalWidth - width - padding * 2) / 2;\n      }\n      if (shouldUnderline) {\n        context.save();\n        context.beginPath();\n        let yOffset = Global_1.Konva._fixTextRendering ? Math.round(fontSize / 4) : Math.round(fontSize / 2);\n        const x = lineTranslateX;\n        const y = translateY + lineTranslateY + yOffset;\n        context.moveTo(x, y);\n        spacesNumber = text.split(' ').length - 1;\n        oneWord = spacesNumber === 0;\n        lineWidth = align === JUSTIFY && !lastLine ? totalWidth - padding * 2 : width;\n        context.lineTo(x + Math.round(lineWidth), y);\n        context.lineWidth = fontSize / 15;\n        const gradient = this._getLinearGradient();\n        context.strokeStyle = gradient || fill;\n        context.stroke();\n        context.restore();\n      }\n      if (shouldLineThrough) {\n        context.save();\n        context.beginPath();\n        let yOffset = Global_1.Konva._fixTextRendering ? -Math.round(fontSize / 4) : 0;\n        context.moveTo(lineTranslateX, translateY + lineTranslateY + yOffset);\n        spacesNumber = text.split(' ').length - 1;\n        oneWord = spacesNumber === 0;\n        lineWidth = align === JUSTIFY && lastLine && !oneWord ? totalWidth - padding * 2 : width;\n        context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + yOffset);\n        context.lineWidth = fontSize / 15;\n        const gradient = this._getLinearGradient();\n        context.strokeStyle = gradient || fill;\n        context.stroke();\n        context.restore();\n      }\n      if (direction !== RTL && (letterSpacing !== 0 || align === JUSTIFY)) {\n        spacesNumber = text.split(' ').length - 1;\n        var array = stringToArray(text);\n        for (var li = 0; li < array.length; li++) {\n          var letter = array[li];\n          if (letter === ' ' && !lastLine && align === JUSTIFY) {\n            lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n          }\n          this._partialTextX = lineTranslateX;\n          this._partialTextY = translateY + lineTranslateY;\n          this._partialText = letter;\n          context.fillStrokeShape(this);\n          lineTranslateX += this.measureSize(letter).width + letterSpacing;\n        }\n      } else {\n        if (letterSpacing !== 0) {\n          context.setAttr('letterSpacing', `${letterSpacing}px`);\n        }\n        this._partialTextX = lineTranslateX;\n        this._partialTextY = translateY + lineTranslateY;\n        this._partialText = text;\n        context.fillStrokeShape(this);\n      }\n      context.restore();\n      if (textArrLen > 1) {\n        translateY += lineHeightPx;\n      }\n    }\n  }\n  _hitFunc(context) {\n    var width = this.getWidth(),\n      height = this.getHeight();\n    context.beginPath();\n    context.rect(0, 0, width, height);\n    context.closePath();\n    context.fillStrokeShape(this);\n  }\n  setText(text) {\n    var str = Util_1.Util._isString(text) ? text : text === null || text === undefined ? '' : text + '';\n    this._setAttr(TEXT, str);\n    return this;\n  }\n  getWidth() {\n    var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n    return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n  }\n  getHeight() {\n    var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n    return isAuto ? this.fontSize() * this.textArr.length * this.lineHeight() + this.padding() * 2 : this.attrs.height;\n  }\n  getTextWidth() {\n    return this.textWidth;\n  }\n  getTextHeight() {\n    Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n    return this.textHeight;\n  }\n  measureSize(text) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    var _context = getDummyContext(),\n      fontSize = this.fontSize(),\n      metrics;\n    _context.save();\n    _context.font = this._getContextFont();\n    metrics = _context.measureText(text);\n    _context.restore();\n    const scaleFactor = fontSize / 100;\n    return {\n      actualBoundingBoxAscent: (_a = metrics.actualBoundingBoxAscent) !== null && _a !== void 0 ? _a : 71.58203125 * scaleFactor,\n      actualBoundingBoxDescent: (_b = metrics.actualBoundingBoxDescent) !== null && _b !== void 0 ? _b : 0,\n      actualBoundingBoxLeft: (_c = metrics.actualBoundingBoxLeft) !== null && _c !== void 0 ? _c : -7.421875 * scaleFactor,\n      actualBoundingBoxRight: (_d = metrics.actualBoundingBoxRight) !== null && _d !== void 0 ? _d : 75.732421875 * scaleFactor,\n      alphabeticBaseline: (_e = metrics.alphabeticBaseline) !== null && _e !== void 0 ? _e : 0,\n      emHeightAscent: (_f = metrics.emHeightAscent) !== null && _f !== void 0 ? _f : 100 * scaleFactor,\n      emHeightDescent: (_g = metrics.emHeightDescent) !== null && _g !== void 0 ? _g : -20 * scaleFactor,\n      fontBoundingBoxAscent: (_h = metrics.fontBoundingBoxAscent) !== null && _h !== void 0 ? _h : 91 * scaleFactor,\n      fontBoundingBoxDescent: (_j = metrics.fontBoundingBoxDescent) !== null && _j !== void 0 ? _j : 21 * scaleFactor,\n      hangingBaseline: (_k = metrics.hangingBaseline) !== null && _k !== void 0 ? _k : 72.80000305175781 * scaleFactor,\n      ideographicBaseline: (_l = metrics.ideographicBaseline) !== null && _l !== void 0 ? _l : -21 * scaleFactor,\n      width: metrics.width,\n      height: fontSize\n    };\n  }\n  _getContextFont() {\n    return this.fontStyle() + SPACE + this.fontVariant() + SPACE + (this.fontSize() + PX_SPACE) + normalizeFontFamily(this.fontFamily());\n  }\n  _addTextLine(line) {\n    const align = this.align();\n    if (align === JUSTIFY) {\n      line = line.trim();\n    }\n    var width = this._getTextWidth(line);\n    return this.textArr.push({\n      text: line,\n      width: width,\n      lastInParagraph: false\n    });\n  }\n  _getTextWidth(text) {\n    var letterSpacing = this.letterSpacing();\n    var length = text.length;\n    return getDummyContext().measureText(text).width + (length ? letterSpacing * (length - 1) : 0);\n  }\n  _setTextData() {\n    var lines = this.text().split('\\n'),\n      fontSize = +this.fontSize(),\n      textWidth = 0,\n      lineHeightPx = this.lineHeight() * fontSize,\n      width = this.attrs.width,\n      height = this.attrs.height,\n      fixedWidth = width !== AUTO && width !== undefined,\n      fixedHeight = height !== AUTO && height !== undefined,\n      padding = this.padding(),\n      maxWidth = width - padding * 2,\n      maxHeightPx = height - padding * 2,\n      currentHeightPx = 0,\n      wrap = this.wrap(),\n      shouldWrap = wrap !== NONE,\n      wrapAtWord = wrap !== CHAR && shouldWrap,\n      shouldAddEllipsis = this.ellipsis();\n    this.textArr = [];\n    getDummyContext().font = this._getContextFont();\n    var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n    for (var i = 0, max = lines.length; i < max; ++i) {\n      var line = lines[i];\n      var lineWidth = this._getTextWidth(line);\n      if (fixedWidth && lineWidth > maxWidth) {\n        while (line.length > 0) {\n          var low = 0,\n            high = line.length,\n            match = '',\n            matchWidth = 0;\n          while (low < high) {\n            var mid = low + high >>> 1,\n              substr = line.slice(0, mid + 1),\n              substrWidth = this._getTextWidth(substr) + additionalWidth;\n            if (substrWidth <= maxWidth) {\n              low = mid + 1;\n              match = substr;\n              matchWidth = substrWidth;\n            } else {\n              high = mid;\n            }\n          }\n          if (match) {\n            if (wrapAtWord) {\n              var wrapIndex;\n              var nextChar = line[match.length];\n              var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n              if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                wrapIndex = match.length;\n              } else {\n                wrapIndex = Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) + 1;\n              }\n              if (wrapIndex > 0) {\n                low = wrapIndex;\n                match = match.slice(0, low);\n                matchWidth = this._getTextWidth(match);\n              }\n            }\n            match = match.trimRight();\n            this._addTextLine(match);\n            textWidth = Math.max(textWidth, matchWidth);\n            currentHeightPx += lineHeightPx;\n            var shouldHandleEllipsis = this._shouldHandleEllipsis(currentHeightPx);\n            if (shouldHandleEllipsis) {\n              this._tryToAddEllipsisToLastLine();\n              break;\n            }\n            line = line.slice(low);\n            line = line.trimLeft();\n            if (line.length > 0) {\n              lineWidth = this._getTextWidth(line);\n              if (lineWidth <= maxWidth) {\n                this._addTextLine(line);\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n                break;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n      } else {\n        this._addTextLine(line);\n        currentHeightPx += lineHeightPx;\n        textWidth = Math.max(textWidth, lineWidth);\n        if (this._shouldHandleEllipsis(currentHeightPx) && i < max - 1) {\n          this._tryToAddEllipsisToLastLine();\n        }\n      }\n      if (this.textArr[this.textArr.length - 1]) {\n        this.textArr[this.textArr.length - 1].lastInParagraph = true;\n      }\n      if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n        break;\n      }\n    }\n    this.textHeight = fontSize;\n    this.textWidth = textWidth;\n  }\n  _shouldHandleEllipsis(currentHeightPx) {\n    var fontSize = +this.fontSize(),\n      lineHeightPx = this.lineHeight() * fontSize,\n      height = this.attrs.height,\n      fixedHeight = height !== AUTO && height !== undefined,\n      padding = this.padding(),\n      maxHeightPx = height - padding * 2,\n      wrap = this.wrap(),\n      shouldWrap = wrap !== NONE;\n    return !shouldWrap || fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx;\n  }\n  _tryToAddEllipsisToLastLine() {\n    var width = this.attrs.width,\n      fixedWidth = width !== AUTO && width !== undefined,\n      padding = this.padding(),\n      maxWidth = width - padding * 2,\n      shouldAddEllipsis = this.ellipsis();\n    var lastLine = this.textArr[this.textArr.length - 1];\n    if (!lastLine || !shouldAddEllipsis) {\n      return;\n    }\n    if (fixedWidth) {\n      var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n      if (!haveSpace) {\n        lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n      }\n    }\n    this.textArr.splice(this.textArr.length - 1, 1);\n    this._addTextLine(lastLine.text + ELLIPSIS);\n  }\n  getStrokeScaleEnabled() {\n    return true;\n  }\n  _useBufferCanvas() {\n    const hasLine = this.textDecoration().indexOf('underline') !== -1 || this.textDecoration().indexOf('line-through') !== -1;\n    const hasShadow = this.hasShadow();\n    if (hasLine && hasShadow) {\n      return true;\n    }\n    return super._useBufferCanvas();\n  }\n}\nexports.Text = Text;\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = ['text', 'fontSize', 'padding', 'wrap', 'lineHeight', 'letterSpacing'];\n(0, Global_2._registerNode)(Text);\nFactory_1.Factory.overWriteSetter(Text, 'width', (0, Validators_1.getNumberOrAutoValidator)());\nFactory_1.Factory.overWriteSetter(Text, 'height', (0, Validators_1.getNumberOrAutoValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'direction', INHERIT);\nFactory_1.Factory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory_1.Factory.addGetterSetter(Text, 'fontSize', 12, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'padding', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'align', LEFT);\nFactory_1.Factory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory_1.Factory.addGetterSetter(Text, 'lineHeight', 1, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'wrap', WORD);\nFactory_1.Factory.addGetterSetter(Text, 'ellipsis', false, (0, Validators_1.getBooleanValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'letterSpacing', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'text', '', (0, Validators_1.getStringValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'textDecoration', '');","map":{"version":3,"names":["Object","defineProperty","exports","value","Text","stringToArray","Util_1","require","Factory_1","Shape_1","Global_1","Validators_1","Global_2","string","Array","from","AUTO","CENTER","INHERIT","JUSTIFY","CHANGE_KONVA","CONTEXT_2D","DASH","LEFT","LTR","TEXT","TEXT_UPPER","TOP","BOTTOM","MIDDLE","NORMAL","PX_SPACE","SPACE","RIGHT","RTL","WORD","CHAR","NONE","ELLIPSIS","ATTR_CHANGE_LIST","attrChangeListLen","length","normalizeFontFamily","fontFamily","split","map","family","trim","hasSpace","indexOf","hasQuotes","join","dummyContext","getDummyContext","Util","createCanvasElement","getContext","_fillFunc","context","fillText","_partialText","_partialTextX","_partialTextY","_strokeFunc","setAttr","strokeText","checkDefaultFill","config","fillLinearGradientColorStops","fillRadialGradientColorStops","fillPatternImage","fill","Shape","constructor","n","on","_setTextData","_sceneFunc","textArr","textArrLen","text","padding","fontSize","lineHeightPx","lineHeight","verticalAlign","direction","alignY","align","totalWidth","getWidth","letterSpacing","textDecoration","shouldUnderline","shouldLineThrough","translateY","baseline","Konva","_fixTextRendering","metrics","measureSize","fontBoundingBoxAscent","fontBoundingBoxDescent","lineTranslateX","lineTranslateY","_getContextFont","getHeight","translate","obj","width","lastLine","lastInParagraph","spacesNumber","oneWord","lineWidth","save","beginPath","yOffset","Math","round","x","y","moveTo","lineTo","gradient","_getLinearGradient","strokeStyle","stroke","restore","array","li","letter","fillStrokeShape","_hitFunc","height","rect","closePath","setText","str","_isString","undefined","_setAttr","isAuto","attrs","getTextWidth","textWidth","getTextHeight","warn","textHeight","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_context","font","measureText","scaleFactor","actualBoundingBoxAscent","actualBoundingBoxDescent","actualBoundingBoxLeft","actualBoundingBoxRight","alphabeticBaseline","emHeightAscent","emHeightDescent","hangingBaseline","ideographicBaseline","fontStyle","fontVariant","_addTextLine","line","_getTextWidth","push","lines","fixedWidth","fixedHeight","maxWidth","maxHeightPx","currentHeightPx","wrap","shouldWrap","wrapAtWord","shouldAddEllipsis","ellipsis","additionalWidth","i","max","low","high","match","matchWidth","mid","substr","slice","substrWidth","wrapIndex","nextChar","nextIsSpaceOrDash","lastIndexOf","trimRight","shouldHandleEllipsis","_shouldHandleEllipsis","_tryToAddEllipsisToLastLine","trimLeft","haveSpace","splice","getStrokeScaleEnabled","_useBufferCanvas","hasLine","hasShadow","prototype","className","_attrsAffectingSize","_registerNode","Factory","overWriteSetter","getNumberOrAutoValidator","addGetterSetter","getNumberValidator","getBooleanValidator","getStringValidator"],"sources":["/Users/alexanderjarvheden/Projects/DD1367-Software-Engineering-in-Project-Form/client/node_modules/konva/lib/shapes/Text.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Text = exports.stringToArray = void 0;\nconst Util_1 = require(\"../Util\");\nconst Factory_1 = require(\"../Factory\");\nconst Shape_1 = require(\"../Shape\");\nconst Global_1 = require(\"../Global\");\nconst Validators_1 = require(\"../Validators\");\nconst Global_2 = require(\"../Global\");\nfunction stringToArray(string) {\n    return Array.from(string);\n}\nexports.stringToArray = stringToArray;\nvar AUTO = 'auto', CENTER = 'center', INHERIT = 'inherit', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', LTR = 'ltr', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', RTL = 'rtl', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = 'â€¦', ATTR_CHANGE_LIST = [\n    'direction',\n    'fontFamily',\n    'fontSize',\n    'fontStyle',\n    'fontVariant',\n    'padding',\n    'align',\n    'verticalAlign',\n    'lineHeight',\n    'text',\n    'width',\n    'height',\n    'wrap',\n    'ellipsis',\n    'letterSpacing',\n], attrChangeListLen = ATTR_CHANGE_LIST.length;\nfunction normalizeFontFamily(fontFamily) {\n    return fontFamily\n        .split(',')\n        .map((family) => {\n        family = family.trim();\n        const hasSpace = family.indexOf(' ') >= 0;\n        const hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n        if (hasSpace && !hasQuotes) {\n            family = `\"${family}\"`;\n        }\n        return family;\n    })\n        .join(', ');\n}\nvar dummyContext;\nfunction getDummyContext() {\n    if (dummyContext) {\n        return dummyContext;\n    }\n    dummyContext = Util_1.Util.createCanvasElement().getContext(CONTEXT_2D);\n    return dummyContext;\n}\nfunction _fillFunc(context) {\n    context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction _strokeFunc(context) {\n    context.setAttr('miterLimit', 2);\n    context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction checkDefaultFill(config) {\n    config = config || {};\n    if (!config.fillLinearGradientColorStops &&\n        !config.fillRadialGradientColorStops &&\n        !config.fillPatternImage) {\n        config.fill = config.fill || 'black';\n    }\n    return config;\n}\nclass Text extends Shape_1.Shape {\n    constructor(config) {\n        super(checkDefaultFill(config));\n        this._partialTextX = 0;\n        this._partialTextY = 0;\n        for (var n = 0; n < attrChangeListLen; n++) {\n            this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);\n        }\n        this._setTextData();\n    }\n    _sceneFunc(context) {\n        var textArr = this.textArr, textArrLen = textArr.length;\n        if (!this.text()) {\n            return;\n        }\n        var padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, verticalAlign = this.verticalAlign(), direction = this.direction(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;\n        direction = direction === INHERIT ? context.direction : direction;\n        var translateY = lineHeightPx / 2;\n        var baseline = MIDDLE;\n        if (Global_1.Konva._fixTextRendering) {\n            var metrics = this.measureSize('M');\n            baseline = 'alphabetic';\n            translateY =\n                (metrics.fontBoundingBoxAscent - metrics.fontBoundingBoxDescent) / 2 +\n                    lineHeightPx / 2;\n        }\n        var lineTranslateX = 0;\n        var lineTranslateY = 0;\n        if (direction === RTL) {\n            context.setAttr('direction', direction);\n        }\n        context.setAttr('font', this._getContextFont());\n        context.setAttr('textBaseline', baseline);\n        context.setAttr('textAlign', LEFT);\n        if (verticalAlign === MIDDLE) {\n            alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n        }\n        else if (verticalAlign === BOTTOM) {\n            alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n        }\n        context.translate(padding, alignY + padding);\n        for (n = 0; n < textArrLen; n++) {\n            var lineTranslateX = 0;\n            var lineTranslateY = 0;\n            var obj = textArr[n], text = obj.text, width = obj.width, lastLine = obj.lastInParagraph, spacesNumber, oneWord, lineWidth;\n            context.save();\n            if (align === RIGHT) {\n                lineTranslateX += totalWidth - width - padding * 2;\n            }\n            else if (align === CENTER) {\n                lineTranslateX += (totalWidth - width - padding * 2) / 2;\n            }\n            if (shouldUnderline) {\n                context.save();\n                context.beginPath();\n                let yOffset = Global_1.Konva._fixTextRendering\n                    ? Math.round(fontSize / 4)\n                    : Math.round(fontSize / 2);\n                const x = lineTranslateX;\n                const y = translateY + lineTranslateY + yOffset;\n                context.moveTo(x, y);\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && !lastLine ? totalWidth - padding * 2 : width;\n                context.lineTo(x + Math.round(lineWidth), y);\n                context.lineWidth = fontSize / 15;\n                const gradient = this._getLinearGradient();\n                context.strokeStyle = gradient || fill;\n                context.stroke();\n                context.restore();\n            }\n            if (shouldLineThrough) {\n                context.save();\n                context.beginPath();\n                let yOffset = Global_1.Konva._fixTextRendering ? -Math.round(fontSize / 4) : 0;\n                context.moveTo(lineTranslateX, translateY + lineTranslateY + yOffset);\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && lastLine && !oneWord\n                        ? totalWidth - padding * 2\n                        : width;\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + yOffset);\n                context.lineWidth = fontSize / 15;\n                const gradient = this._getLinearGradient();\n                context.strokeStyle = gradient || fill;\n                context.stroke();\n                context.restore();\n            }\n            if (direction !== RTL && (letterSpacing !== 0 || align === JUSTIFY)) {\n                spacesNumber = text.split(' ').length - 1;\n                var array = stringToArray(text);\n                for (var li = 0; li < array.length; li++) {\n                    var letter = array[li];\n                    if (letter === ' ' && !lastLine && align === JUSTIFY) {\n                        lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n                    }\n                    this._partialTextX = lineTranslateX;\n                    this._partialTextY = translateY + lineTranslateY;\n                    this._partialText = letter;\n                    context.fillStrokeShape(this);\n                    lineTranslateX += this.measureSize(letter).width + letterSpacing;\n                }\n            }\n            else {\n                if (letterSpacing !== 0) {\n                    context.setAttr('letterSpacing', `${letterSpacing}px`);\n                }\n                this._partialTextX = lineTranslateX;\n                this._partialTextY = translateY + lineTranslateY;\n                this._partialText = text;\n                context.fillStrokeShape(this);\n            }\n            context.restore();\n            if (textArrLen > 1) {\n                translateY += lineHeightPx;\n            }\n        }\n    }\n    _hitFunc(context) {\n        var width = this.getWidth(), height = this.getHeight();\n        context.beginPath();\n        context.rect(0, 0, width, height);\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    setText(text) {\n        var str = Util_1.Util._isString(text)\n            ? text\n            : text === null || text === undefined\n                ? ''\n                : text + '';\n        this._setAttr(TEXT, str);\n        return this;\n    }\n    getWidth() {\n        var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n        return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n    }\n    getHeight() {\n        var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n        return isAuto\n            ? this.fontSize() * this.textArr.length * this.lineHeight() +\n                this.padding() * 2\n            : this.attrs.height;\n    }\n    getTextWidth() {\n        return this.textWidth;\n    }\n    getTextHeight() {\n        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n        return this.textHeight;\n    }\n    measureSize(text) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        var _context = getDummyContext(), fontSize = this.fontSize(), metrics;\n        _context.save();\n        _context.font = this._getContextFont();\n        metrics = _context.measureText(text);\n        _context.restore();\n        const scaleFactor = fontSize / 100;\n        return {\n            actualBoundingBoxAscent: (_a = metrics.actualBoundingBoxAscent) !== null && _a !== void 0 ? _a : 71.58203125 * scaleFactor,\n            actualBoundingBoxDescent: (_b = metrics.actualBoundingBoxDescent) !== null && _b !== void 0 ? _b : 0,\n            actualBoundingBoxLeft: (_c = metrics.actualBoundingBoxLeft) !== null && _c !== void 0 ? _c : -7.421875 * scaleFactor,\n            actualBoundingBoxRight: (_d = metrics.actualBoundingBoxRight) !== null && _d !== void 0 ? _d : 75.732421875 * scaleFactor,\n            alphabeticBaseline: (_e = metrics.alphabeticBaseline) !== null && _e !== void 0 ? _e : 0,\n            emHeightAscent: (_f = metrics.emHeightAscent) !== null && _f !== void 0 ? _f : 100 * scaleFactor,\n            emHeightDescent: (_g = metrics.emHeightDescent) !== null && _g !== void 0 ? _g : -20 * scaleFactor,\n            fontBoundingBoxAscent: (_h = metrics.fontBoundingBoxAscent) !== null && _h !== void 0 ? _h : 91 * scaleFactor,\n            fontBoundingBoxDescent: (_j = metrics.fontBoundingBoxDescent) !== null && _j !== void 0 ? _j : 21 * scaleFactor,\n            hangingBaseline: (_k = metrics.hangingBaseline) !== null && _k !== void 0 ? _k : 72.80000305175781 * scaleFactor,\n            ideographicBaseline: (_l = metrics.ideographicBaseline) !== null && _l !== void 0 ? _l : -21 * scaleFactor,\n            width: metrics.width,\n            height: fontSize,\n        };\n    }\n    _getContextFont() {\n        return (this.fontStyle() +\n            SPACE +\n            this.fontVariant() +\n            SPACE +\n            (this.fontSize() + PX_SPACE) +\n            normalizeFontFamily(this.fontFamily()));\n    }\n    _addTextLine(line) {\n        const align = this.align();\n        if (align === JUSTIFY) {\n            line = line.trim();\n        }\n        var width = this._getTextWidth(line);\n        return this.textArr.push({\n            text: line,\n            width: width,\n            lastInParagraph: false,\n        });\n    }\n    _getTextWidth(text) {\n        var letterSpacing = this.letterSpacing();\n        var length = text.length;\n        return (getDummyContext().measureText(text).width +\n            (length ? letterSpacing * (length - 1) : 0));\n    }\n    _setTextData() {\n        var lines = this.text().split('\\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis();\n        this.textArr = [];\n        getDummyContext().font = this._getContextFont();\n        var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n        for (var i = 0, max = lines.length; i < max; ++i) {\n            var line = lines[i];\n            var lineWidth = this._getTextWidth(line);\n            if (fixedWidth && lineWidth > maxWidth) {\n                while (line.length > 0) {\n                    var low = 0, high = line.length, match = '', matchWidth = 0;\n                    while (low < high) {\n                        var mid = (low + high) >>> 1, substr = line.slice(0, mid + 1), substrWidth = this._getTextWidth(substr) + additionalWidth;\n                        if (substrWidth <= maxWidth) {\n                            low = mid + 1;\n                            match = substr;\n                            matchWidth = substrWidth;\n                        }\n                        else {\n                            high = mid;\n                        }\n                    }\n                    if (match) {\n                        if (wrapAtWord) {\n                            var wrapIndex;\n                            var nextChar = line[match.length];\n                            var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n                            if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                                wrapIndex = match.length;\n                            }\n                            else {\n                                wrapIndex =\n                                    Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) +\n                                        1;\n                            }\n                            if (wrapIndex > 0) {\n                                low = wrapIndex;\n                                match = match.slice(0, low);\n                                matchWidth = this._getTextWidth(match);\n                            }\n                        }\n                        match = match.trimRight();\n                        this._addTextLine(match);\n                        textWidth = Math.max(textWidth, matchWidth);\n                        currentHeightPx += lineHeightPx;\n                        var shouldHandleEllipsis = this._shouldHandleEllipsis(currentHeightPx);\n                        if (shouldHandleEllipsis) {\n                            this._tryToAddEllipsisToLastLine();\n                            break;\n                        }\n                        line = line.slice(low);\n                        line = line.trimLeft();\n                        if (line.length > 0) {\n                            lineWidth = this._getTextWidth(line);\n                            if (lineWidth <= maxWidth) {\n                                this._addTextLine(line);\n                                currentHeightPx += lineHeightPx;\n                                textWidth = Math.max(textWidth, lineWidth);\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n            else {\n                this._addTextLine(line);\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n                if (this._shouldHandleEllipsis(currentHeightPx) && i < max - 1) {\n                    this._tryToAddEllipsisToLastLine();\n                }\n            }\n            if (this.textArr[this.textArr.length - 1]) {\n                this.textArr[this.textArr.length - 1].lastInParagraph = true;\n            }\n            if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n                break;\n            }\n        }\n        this.textHeight = fontSize;\n        this.textWidth = textWidth;\n    }\n    _shouldHandleEllipsis(currentHeightPx) {\n        var fontSize = +this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, height = this.attrs.height, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxHeightPx = height - padding * 2, wrap = this.wrap(), shouldWrap = wrap !== NONE;\n        return (!shouldWrap ||\n            (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx));\n    }\n    _tryToAddEllipsisToLastLine() {\n        var width = this.attrs.width, fixedWidth = width !== AUTO && width !== undefined, padding = this.padding(), maxWidth = width - padding * 2, shouldAddEllipsis = this.ellipsis();\n        var lastLine = this.textArr[this.textArr.length - 1];\n        if (!lastLine || !shouldAddEllipsis) {\n            return;\n        }\n        if (fixedWidth) {\n            var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n            if (!haveSpace) {\n                lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n            }\n        }\n        this.textArr.splice(this.textArr.length - 1, 1);\n        this._addTextLine(lastLine.text + ELLIPSIS);\n    }\n    getStrokeScaleEnabled() {\n        return true;\n    }\n    _useBufferCanvas() {\n        const hasLine = this.textDecoration().indexOf('underline') !== -1 ||\n            this.textDecoration().indexOf('line-through') !== -1;\n        const hasShadow = this.hasShadow();\n        if (hasLine && hasShadow) {\n            return true;\n        }\n        return super._useBufferCanvas();\n    }\n}\nexports.Text = Text;\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = [\n    'text',\n    'fontSize',\n    'padding',\n    'wrap',\n    'lineHeight',\n    'letterSpacing',\n];\n(0, Global_2._registerNode)(Text);\nFactory_1.Factory.overWriteSetter(Text, 'width', (0, Validators_1.getNumberOrAutoValidator)());\nFactory_1.Factory.overWriteSetter(Text, 'height', (0, Validators_1.getNumberOrAutoValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'direction', INHERIT);\nFactory_1.Factory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory_1.Factory.addGetterSetter(Text, 'fontSize', 12, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory_1.Factory.addGetterSetter(Text, 'padding', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'align', LEFT);\nFactory_1.Factory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory_1.Factory.addGetterSetter(Text, 'lineHeight', 1, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'wrap', WORD);\nFactory_1.Factory.addGetterSetter(Text, 'ellipsis', false, (0, Validators_1.getBooleanValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'letterSpacing', 0, (0, Validators_1.getNumberValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'text', '', (0, Validators_1.getStringValidator)());\nFactory_1.Factory.addGetterSetter(Text, 'textDecoration', '');\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}